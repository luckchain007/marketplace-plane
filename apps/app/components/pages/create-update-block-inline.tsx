import React, { useCallback, useEffect, useState } from "react";

import { useRouter } from "next/router";
import dynamic from "next/dynamic";

import useSWR, { mutate } from "swr";

import { LayerDiagonalIcon } from "components/icons";
import { ArrowPathIcon, LinkIcon } from "@heroicons/react/20/solid";
import {
  BoltIcon,
  SparklesIcon,
  TrashIcon,
} from "@heroicons/react/24/outline";

// react-hook-form
import { Controller, useForm } from "react-hook-form";
// services
import pagesService from "services/pages.service";
// hooks
import useToast from "hooks/use-toast";
// ui
import { Loader, PrimaryButton, SecondaryButton, CustomMenu, TextArea } from "components/ui";
// types
import { IPageBlock } from "types";
// fetch-keys
import { PAGE_BLOCKS_LIST } from "constants/fetch-keys";
import issuesService from "services/issues.service";
import aiService from "services/ai.service";

type Props = {
  handleClose: () => void;
  data?: IPageBlock;
  setIsSyncing?: React.Dispatch<React.SetStateAction<boolean>>;
  focus?: keyof IPageBlock;
  setGptAssistantModal: () => void;
  handleBlockSync?: () => void;
  handleCopyText?: () => void;
  pushBlockIntoIssues?: () => void;
  deletePageBlock?: () => void;
};

const defaultValues = {
  name: "",
  description: "<p></p>",
};

const RemirrorRichTextEditor = dynamic(() => import("components/rich-text-editor"), {
  ssr: false,
  loading: () => (
    <Loader className="mx-4 mt-6">
      <Loader.Item height="100px" width="100%" />
    </Loader>
  ),
});

export const CreateUpdateBlockInline: React.FC<Props> = ({
  handleClose,
  data,
  setIsSyncing,
  focus,
  setGptAssistantModal,
  handleBlockSync,
  handleCopyText,
  pushBlockIntoIssues,
  deletePageBlock,
}) => {

  const [iAmFeelingLucky, setIAmFeelingLucky] = useState(false);

  const router = useRouter();
  const { workspaceSlug, projectId, pageId } = router.query;

  const { setToastAlert } = useToast();

  const {
    handleSubmit,
    register,
    control,
    watch,
    setValue,
    setFocus,
    reset,
    formState: { isSubmitting },
  } = useForm<IPageBlock>({
    defaultValues,
  });

  const onClose = useCallback(() => {
    if (data) handleClose();

    reset();
  }, [handleClose, reset, data]);

  const createPageBlock = async (formData: Partial<IPageBlock>) => {
    if (!workspaceSlug || !projectId || !pageId) return;

    await pagesService
      .createPageBlock(workspaceSlug as string, projectId as string, pageId as string, {
        name: formData.name,
        description: formData.description ?? "",
        description_html: formData.description_html ?? "<p></p>",
      })
      .then((res) => {
        mutate<IPageBlock[]>(
          PAGE_BLOCKS_LIST(pageId as string),
          (prevData) => [...(prevData as IPageBlock[]), res],
          false
        );
      })
      .catch(() => {
        setToastAlert({
          type: "error",
          title: "Error!",
          message: "Page could not be created. Please try again.",
        });
      })
      .finally(() => onClose());
  };

  const updatePageBlock = async (formData: Partial<IPageBlock>) => {
    if (!workspaceSlug || !projectId || !pageId || !data) return;

    if (data.issue && data.sync && setIsSyncing) setIsSyncing(true);

    mutate<IPageBlock[]>(
      PAGE_BLOCKS_LIST(pageId as string),
      (prevData) =>
        prevData?.map((p) => {
          if (p.id === data.id) return { ...p, ...formData };

          return p;
        }),
      false
    );

    await pagesService
      .patchPageBlock(workspaceSlug as string, projectId as string, pageId as string, data.id, {
        name: formData.name,
        description: formData.description,
        description_html: formData.description_html,
      })
      .then((res) => {
        mutate(PAGE_BLOCKS_LIST(pageId as string));
        if (data.issue && data.sync)
          issuesService
            .patchIssue(workspaceSlug as string, projectId as string, data.issue, {
              name: res.name,
              description: res.description,
              description_html: res.description_html,
            })
            .finally(() => {
              if (setIsSyncing) setIsSyncing(false);
            });
      })
      .finally(() => onClose());
  };

  const handleAutoGenerateDescription = async () => {
    if (!workspaceSlug || !projectId) return;

    setIAmFeelingLucky(true);

    aiService
      .createGptTask(workspaceSlug as string, projectId as string, {
        prompt: watch("name"),
        task: "Generate a proper description for this issue in context of a project management software.",
      })
      .then((res) => {
        if (res.response === "")
          setToastAlert({
            type: "error",
            title: "Error!",
            message:
              "Block title isn't informative enough to generate the description. Please try with a different title.",
          });
        else {
          setValue("description", {});
          setValue("description_html", `${watch("description_html")}<p>${res.response}</p>`);
        }
      })
      .catch((err) => {
        if (err.status === 429)
          setToastAlert({
            type: "error",
            title: "Error!",
            message:
              "You have reached the maximum number of requests of 50 requests per month per user.",
          });
        else
          setToastAlert({
            type: "error",
            title: "Error!",
            message: "Some error occurred. Please try again.",
          });
      }).finally(()=>setIAmFeelingLucky(false));
  };

  useEffect(() => {
    if (focus) setFocus(focus);

    if (!data) return;

    reset({
      ...defaultValues,
      name: data.name,
      description: data.description,
      description_html: data.description_html,
    });
  }, [reset, data, focus, setFocus]);

  useEffect(() => {
    window.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape") handleClose();
    });

    return () => {
      window.removeEventListener("keydown", (e: KeyboardEvent) => {
        if (e.key === "Escape") handleClose();
      });
    };
  }, [handleClose]);

  return (
    <div>
      <form
        className="border divide-y rounded-md shadow-md"
        onSubmit={data ? handleSubmit(updatePageBlock) : handleSubmit(createPageBlock)}
      >
        <div className="px-4 pt-4">
          <div className="flex justify-between">
            <TextArea
              id="name"
              name="name"
              placeholder="Title"
              register={register}
              className="min-h-10 block w-full resize-none overflow-hidden border-none bg-transparent py-1 text-xl font-semibold ring-0 focus:ring-gray-200"
              role="textbox"
              autoComplete="off"
              maxLength={255}
            />
            <CustomMenu label={<BoltIcon className="h-4.5 w-3.5" />} noBorder noChevron>
              {data?.issue ? (
                <>
                  <CustomMenu.MenuItem onClick={handleBlockSync}>
                    <span className="flex items-center gap-1">
                      <ArrowPathIcon className="h-4 w-4" />
                      <span>Turn sync {data?.sync ? "off" : "on"}</span>
                    </span>
                  </CustomMenu.MenuItem>
                  <CustomMenu.MenuItem onClick={handleCopyText}>
                    <span className="flex items-center gap-1">
                      <LinkIcon className="h-4 w-4" />
                      Copy issue link
                    </span>
                  </CustomMenu.MenuItem>
                </>
              ) : (
                <CustomMenu.MenuItem onClick={pushBlockIntoIssues}>
                  <span className="flex items-center gap-1">
                    <LayerDiagonalIcon className="h-4 w-4" />
                    Push into issues
                  </span>
                </CustomMenu.MenuItem>
              )}
              <CustomMenu.MenuItem onClick={deletePageBlock}>
                <span className="flex items-center gap-1">
                  <TrashIcon className="h-4 w-4" />
                  Delete block
                </span>
              </CustomMenu.MenuItem>
            </CustomMenu>
          </div>
          <div className="page-block-section text-[#495057] relative">
            <Controller
              name="description"
              control={control}
              render={({ field: { value } }) => (
                <RemirrorRichTextEditor
                  value={
                    !value || (typeof value === "object" && Object.keys(value).length === 0)
                      ? watch("description_html")
                      : value
                  }
                  onJSONChange={(jsonValue) => setValue("description", jsonValue)}
                  onHTMLChange={(htmlValue) => setValue("description_html", htmlValue)}
                  placeholder="Write something..."
                  customClassName="text-sm"
                  noBorder
                  borderOnFocus={false}
                />
              )}
            />
            <div className="flex m-2 mt-6 ml-2">
              <button
                type="button"
                className={`flex items-center gap-1 rounded px-1.5 py-1 text-xs border hover:bg-gray-100 ${
                  iAmFeelingLucky ? "cursor-wait bg-gray-100" : ""
                }`}
                onClick={handleAutoGenerateDescription}
                disabled={iAmFeelingLucky}
              >
                {iAmFeelingLucky ? (
                  "Generating response..."
                ) : (
                  <>
                    <SparklesIcon className="h-4 w-4" />I{"'"}m feeling lucky
                  </>
                )}
              </button>
              {data && <button
                type="button"
                className="-mr-2 flex items-center gap-1 rounded px-1.5 py-1 text-xs border ml-4 hover:bg-gray-100"
                onClick={() => {
                  onClose();
                  setGptAssistantModal();
                }}
              >
                <SparklesIcon className="h-4 w-4" />
                AI
              </button>}
            </div>
          </div>
        </div>
        <div className="flex p-4 justify-end items-center gap-2">
          <SecondaryButton onClick={handleClose}>Cancel</SecondaryButton>
          <PrimaryButton type="submit" disabled={watch("name") === ""} loading={isSubmitting}>
            {data
              ? isSubmitting
                ? "Updating..."
                : "Update block"
              : isSubmitting
              ? "Adding..."
              : "Add block"}
          </PrimaryButton>
        </div>
      </form>
    </div>
  );
};
